// Generated by CoffeeScript 2.6.1
(function() {
  // MONTHNAMES = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep',
  // 'Oct', 'Nov', 'Dec']
  var BLACK, CODES, City, MAX_BLUE, MAX_GREEN, MAX_RED, MIN_BLUE, MIN_GREEN, MIN_RED, MONTHNAMES, NB_CITIES_PER_100PX_SQ, WHITE, accessToken, colorToHtml, getColor, getForegroundColor, global, gradient, loadCitiesFromJson, loadStatsFromJson, perceivedBrightness, prevNextClick, refreshCities, rgb2hex, updateCitiesMonth, updateMeteoTables, updateMeteoTablesWidth;

  MONTHNAMES = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];

  CODES = ['avgHigh', 'avgLow', 'precipitation', 'precipitationDays', 'monthlySunHours'];

  NB_CITIES_PER_100PX_SQ = 1;

  // chosen using this: davidjohnstone.net/pages/lch-lab-colour-gradient-picker
  MIN_RED = [250, 209, 209];

  MAX_RED = [143, 0, 0];

  MIN_BLUE = [204, 221, 255];

  MAX_BLUE = [0, 50, 158];

  // MIN_GREEN = [230,255,230]
  MIN_GREEN = [230, 250, 210];

  // MEDIUM_GREEN = [20,120,20]
  MAX_GREEN = [0, 102, 29];

  BLACK = [0, 0, 0];

  WHITE = [255, 255, 255];

  global = {
    stats_info: null,
    cities: {},
    map: null,
    searched_city: null,
    cities_in_table: {}
  };

  // setup the search
  $('#search').select2({
    theme: 'bootstrap',
    placeholder: 'Search for a city',
    // allowClear: true
    ajax: {
      url: '/search',
      dataType: 'json',
      delay: 250,
      data: function(params) {
        var page;
        // -1 because select2 is 1-based
        page = params.page != null ? params.page - 1 : 0;
        return {
          q: params.term,
          page: page
        };
      },
      processResults: function(data, page) {
        return {
          results: data.results,
          pagination: {
            more: data.more
          }
        };
      },
      cache: true
    },
    minimumInputLength: 1
  }).on('select2:selecting', function(e) {
    var coords, id;
    coords = e.params.args.data.coords;
    id = e.params.args.data.id;
    global.searched_city = id;
    return global.map.setView(coords, 8);
  }).on('select2:close', function(e) {
    // reset selection on close
    return $('#search').val(null).trigger('change');
  });

  // get the Stat infos
  loadStatsFromJson = function(jsonData) {
    return global.stats = jsonData;
  };

  $.get('stats', [], loadStatsFromJson, 'json');

  // create a map in the "map" div, set the view to a given place and zoom
  global.map = L.map('map', {
    worldCopyJump: true
  }).setView([45.505, -73.0], 5);

  // create a tile layer sourced from mapbox

  // Old version
  // L.tileLayer('https://{s}.tiles.mapbox.com/v4/simlmx.3899a192/{z}/{x}/{y}.png?access_token=pk.eyJ1Ijoic2ltbG14IiwiYSI6IjhiOGM5MTQwNzcwYjI2N2I2OWZmZDJmZDEzZmM1MjRmIn0.9gqLDwhf2tDseRNXlFTGRg').addTo(global.map)
  // New version

  // accessToken = 'pk.eyJ1Ijoic2ltbG14IiwiYSI6IjhiOGM5MTQwNzcwYjI2N2I2OWZmZDJmZDEzZmM1MjRmIn0.9gqLDwhf2tDseRNXlFTGRg';
  accessToken = 'pk.eyJ1Ijoic2ltbG14IiwiYSI6ImNpajdwYzhucDAwMDN1bGtuaGV4dGFmNnEifQ.ut4yzDxEaB2izwwNDuoapw';

  L.tileLayer('https://api.mapbox.com/styles/v1/{id}/tiles/{z}/{x}/{y}?access_token={accessToken}', {
    attribution: '© <a href="https://www.mapbox.com/about/maps/">Mapbox</a> © <a href="http://www.openstreetmap.org/copyright">OpenStreetMap</a> <strong><a href="https://www.mapbox.com/map-feedback/" target="_blank">Improve this map</a></strong>',
    tileSize: 512,
    maxZoom: 18,
    zoomOffset: -1,
    id: 'mapbox/light-v10',
    accessToken
  }).addTo(global.map);

  global.month = (new Date()).getMonth();

  $('#month').text(MONTHNAMES[global.month]);

  updateMeteoTables = function(month) {
    $(".stat-table-data-col").css('border', 'none');
    return $(`.stat-table-data-col-${month}`).css('border', '1px solid black');
  };

  updateMeteoTablesWidth = function() {
    var n;
    n = $('.meteo-table').length;
    if (n > 0) {
      $('#meteo-tables-placeholder').hide();
      $('.right').addClass('right-exp-width');
      $('.right').removeClass('right-width');
      $('.left').addClass('left-exp-width');
      $('.left').removeClass('left-width');
    } else {
      $('#meteo-tables-placeholder').show();
      $('#meteo-tables-clear-all').hide();
      global.cities_in_table = {};
      $('.right').removeClass('right-exp-width');
      $('.right').addClass('right-width');
      $('.left').removeClass('left-exp-width');
      $('.left').addClass('left-width');
    }
    return global.map.invalidateSize();
  };

  updateCitiesMonth = function(month) {
    var c, k, ref, results;
    ref = global.cities;
    results = [];
    for (k in ref) {
      c = ref[k];
      c.updateMonth(month);
      results.push($('#month').text(MONTHNAMES[month]));
    }
    return results;
  };

  prevNextClick = function(sign) {
    global.month += sign;
    if (global.month < 0) {
      global.month += 12;
    } else if (global.month > 11) {
      global.month -= 12;
    }
    updateCitiesMonth(global.month);
    return updateMeteoTables(global.month);
  };

  $('#prev-btn').click(function() {
    return prevNextClick(-1);
  });

  $('#next-btn').click(function() {
    return prevNextClick(1);
  });

  $('#meteo-tables-clear-all').click(function() {
    $('#meteo-tables').empty();
    return updateMeteoTablesWidth();
  });

  rgb2hex = function(red, green, blue) {
    var rgb;
    rgb = blue | (green << 8) | (red << 16);
    return '#' + (0x1000000 + rgb).toString(16).slice(1);
  };

  // rgb_min = min color
  // rgb_max = max color
  // min = min value
  // max = max value
  // val = value we want a color for
  // fn = base function, by default linear but you can use quadratic or log etc.
  gradient = function(rgb_min, rgb_max, min, max, val, fn = null) {
    var i, rgb;
    if (fn == null) {
      fn = function(x) {
        return x;
      };
    }
    if (val <= min) {
      return rgb_min;
    } else if (val >= max) {
      return rgb_max;
    }
    // FIXME make a better interpolation though it might not 
    rgb = (function() {
      var j, len, ref, results;
      ref = [0, 1, 2];
      results = [];
      for (j = 0, len = ref.length; j < len; j++) {
        i = ref[j];
        results.push((rgb_max[i] - rgb_min[i]) / fn(max - min) * fn(val - min) + rgb_min[i]);
      }
      return results;
    })();
    return rgb;
  };

  perceivedBrightness = function(rgb) {
    var b, g, r;
    [r, g, b] = rgb;
    return Math.sqrt(r * r * .299 + g * g * .587 + b * b * .114);
  };

  // textColorFromBg = (rgb) ->
  //     console.log perceivedBrightness(rgb)
  //     if perceivedBrightness(rgb) > 120
  //         return [0,0,0]
  //     return [255,255,255]
  getColor = function(code, value) {
    var gray, rgb, yellow;
    if (value == null) {
      return WHITE;
    }
    if (code === 'avgHigh' || code === 'avgLow') {
      if (value > 10) {
        rgb = gradient(MIN_RED, MAX_RED, 10, 40, value);
      } else {
        rgb = gradient(MAX_BLUE, MIN_BLUE, -20, 10, value);
      }
    } else if (code === 'precipitation') {
      rgb = gradient(MIN_GREEN, MAX_GREEN, 0, 800, value, function(x) {
        return Math.sqrt(x);
      });
    } else if (code === 'precipitationDays') {
      rgb = gradient(MIN_GREEN, MAX_GREEN, 0, 30, value, function(x) {
        return Math.sqrt(x);
      });
    } else if (code === 'monthlySunHours') {
      gray = [149, 149, 133];
      yellow = [255, 255, 26];
      rgb = gradient(gray, yellow, 30, 250, value);
    } else {
      return WHITE;
    }
    return rgb;
  };

  colorToHtml = function(value, color, code, fgcolor = BLACK) {
    var li;
    li = $('<li>');
    li.css('background-color', rgb2hex(...color));
    li.css('color', rgb2hex(...fgcolor));
    li.html(value); //+ " " + global.stats[code].unit)
    return li; //[0].outerHTML
  };

  getForegroundColor = function(bgcolor) {
    if (perceivedBrightness(bgcolor) < 155) {
      return WHITE;
    }
    return BLACK;
  };

  City = class City {
    constructor(name, country, source, coords1, meteo, id1) {
      this.iconHtml = this.iconHtml.bind(this);
      this.addToTable = this.addToTable.bind(this);
      this.name = name;
      this.country = country;
      this.source = source;
      this.coords = coords1;
      this.meteo = meteo;
      this.id = id1;
      this.inTable = false;
    }

    getData(code, month) {
      if (!(code in this.meteo)) {
        return null;
      }
      return this.meteo[code][month];
    }

    iconHtml(month) {
      var code, color, div, fgcolor, j, len, ul, value;
      div = $('<div class="temperature">');
      ul = $('<ul>').appendTo(div);
      if (global.searched_city === this.id) {
        ul.addClass('searched-city');
      }
      for (j = 0, len = CODES.length; j < len; j++) {
        code = CODES[j];
        value = this.getData(code, month);
        if (value == null) {
          continue;
        }
        value = this.formatValue(value);
        color = getColor(code, value);
        fgcolor = getForegroundColor(color);
        ul.append(colorToHtml(value, color, code, fgcolor));
      }
      return div[0].outerHTML;
    }

    makeIcon(month) {
      return L.divIcon({
        className: 'citydata',
        html: this.iconHtml(month),
        iconSize: null
      });
    }

    updateMonth(month) {
      var icon;
      this.lastMonth = month;
      icon = this.makeIcon(month);
      return this.marker.setIcon(icon);
    }

    update() {
      return this.updateMonth(this.lastMonth);
    }

    addToMap(month, map) {
      var icon;
      icon = this.makeIcon(month);
      // effectively, @marker are the last marker we added to
      // a map...
      this.marker = L.marker(this.coords, {
        title: this.name,
        icon: icon
      });
      this.marker.addTo(map);
      this.marker.on('click', this.addToTable);
      return this.lastMonth = month;
    }

    // @marker2 = L.marker(@coords, {title:'debug' + @name})
    // @marker2.addTo map
    removeFromMap(map) {
      return map.removeLayer(this.marker);
    }

    addToTable() {
      var btn, code, color, container, data, fgcolor, header, j, l, len, month, stat_infos, stat_name, table, tr, value;
      if (this.id in global.cities_in_table) {
        return;
      }
      container = $('<div class="meteo-table-container">').appendTo('#meteo-tables').hover((function() {
        return $(this).find('.btn-table-remove').show();
      }), (function() {
        return $(this).find('.btn-table-remove').hide();
      }));
      // pas top shape encore ca
      // .hover((=> $("#name-#{@name}").addClass('highlight-city')),
      //        (=> $("#name-#{@name}").removeClass('highlight-city')))
      btn = $('<button type="button" class="btn btn-danger btn-xs btn-xxs btn-table-remove' + ' meteo-table-close" style="display:none">').append('<span class="glyphicon glyphicon-remove"' + ' aria-hidden="true"></span>').click(function() {
        $(this).parent().parent().remove();
        return updateMeteoTablesWidth();
      }).click(() => {
        return delete global.cities_in_table[this.id];
      });
      header = $('<div class="meteo-table-header">').append(`<strong>${this.name}, ${this.country}</strong>` + `<a href=\"${this.source}\" target=\"_blank\">` + "<button type=\"button\" class=\"btn btn-default btn-xs btn-xxs btn-wiki\">" + "<img src=\"static/images/wiki_w.svg\" style=\"width:16px; height:16px;\">" + "</button>" + "</a>").append(btn).appendTo(container);
      table = $('<table class="meteo-table">').appendTo(container);
      for (j = 0, len = CODES.length; j < len; j++) {
        code = CODES[j];
        if (!(code in this.meteo)) {
          continue;
        }
        data = this.meteo[code];
        stat_infos = global.stats[code];
        stat_name = stat_infos['name'];
        // FIXME remove the next two lines when the name is adjusted in the
        // database
        if (stat_name === 'Precipitation Days') {
          stat_name = 'Precip. Days';
        }
        tr = $('<tr>').appendTo(table);
        $('<th>').html(`${stat_name} (${stat_infos['unit']})`).appendTo(tr);
        for (month = l = 0; l < 12; month = ++l) {
          value = data[month];
          value = this.formatValue(value);
          color = getColor(code, value);
          fgcolor = getForegroundColor(color);
          $('<td>').html(value).css('background-color', rgb2hex(...color)).css('color', rgb2hex(...fgcolor)).addClass('stat-table-data-col').addClass(`stat-table-data-col-${month}`).appendTo(tr);
        }
      }
      $('#meteo-tables-clear-all').show();
      updateMeteoTables(global.month);
      updateMeteoTablesWidth();
      return global.cities_in_table[this.id] = true;
    }

    formatValue(val) {
      if (val >= 100) {
        return val.toPrecision(3);
      }
      // parsing again to remove trailing 0s
      val = parseFloat(val.toFixed(1));
      return val; // to string?
    }

  };

  
  // for code, data of @meteo
  //     table.append($('<tr>'))
  loadCitiesFromJson = function(jsonData) {
    var city_data, infos, new_id, new_ids, ni, oi, old_id, old_ids, results;
    city_data = jsonData;
    new_ids = Object.keys(city_data).sort();
    old_ids = Object.keys(global.cities).sort();
    // remove searched city highlighting
    $('.searched-city').removeClass('searched-city');
    
    // nb_del=nb_new=nb_stay=0
    ni = oi = 0;
    results = [];
    while (true) {
      old_id = old_ids[oi];
      new_id = new_ids[ni];
      if ((old_id == null) && (new_id == null)) {
        break;
      // old city needs to be removed
      } else if ((new_id == null) || old_id < new_id) {
        global.cities[old_id].removeFromMap(global.map);
        delete global.cities[old_id];
        // ++nb_del
        results.push(++oi);
      // new city needs to be added
      } else if ((old_id == null) || new_id < old_id) {
        infos = city_data[new_id];
        global.cities[new_id] = new City(infos.name, infos.country, infos.source, infos.coords, infos.month_stats, parseInt(new_id));
        // ++nb_new
        global.cities[new_id].addToMap(global.month, global.map);
        results.push(++ni);
      } else {
        global.cities[new_id].update();
        ++oi;
        results.push(++ni);
      }
    }
    return results;
  };

  // ++nb_stay

  // console.log 'new', nb_new
  // console.log 'del', nb_del
  // console.log 'stay', nb_stay
  refreshCities = function(e) {
    var bounds, coords, map, nb;
    bounds = global.map.getBounds();
    coords = {
      n: bounds.getNorth(), // - (bounds.getNorth() - bounds.getSouth())*.1
      s: bounds.getSouth(), // + (bounds.getNorth() - bounds.getSouth())*.1
      e: bounds.getEast(), // - (bounds.getEast() - bounds.getWest())*.1
      w: bounds.getWest() // + (bounds.getEast() - bounds.getWest())*.1
    };
    map = $('#map');
    nb = map.width() * map.height() / 100 / 100 * NB_CITIES_PER_100PX_SQ;
    nb = nb.toFixed();
    coords['nb'] = nb;
    return $.get('data', coords, loadCitiesFromJson, 'json');
  };

  global.map.on('moveend', refreshCities);

  refreshCities({});

}).call(this);
