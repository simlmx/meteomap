// Generated by CoffeeScript 1.3.3
(function() {
  var BLACK, City, MAX_BLUE, MAX_GREEN, MAX_RED, MIN_BLUE, MIN_GREEN, MIN_RED, MONTHNAMES, cities, gradient, loadCities, map, month, precipitationToHtml, refreshCities, rgb2hex, temperatureToHtml, updateCitiesMonth;

  MONTHNAMES = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];

  MIN_RED = [255, 230, 230];

  MAX_RED = [204, 0, 0];

  MIN_BLUE = [230, 230, 255];

  MAX_BLUE = [0, 0, 204];

  MIN_GREEN = [230, 255, 230];

  MAX_GREEN = [0, 120, 0];

  BLACK = [0, 0, 0];

  map = L.map('map').setView([51.505, -0.09], 5);

  L.tileLayer('https://{s}.tiles.mapbox.com/v4/simlmx.3899a192/{z}/{x}/{y}.png?access_token=pk.eyJ1Ijoic2ltbG14IiwiYSI6IjhiOGM5MTQwNzcwYjI2N2I2OWZmZDJmZDEzZmM1MjRmIn0.9gqLDwhf2tDseRNXlFTGRg').addTo(map);

  month = (new Date()).getMonth();

  $('#month').text(MONTHNAMES[month]);

  updateCitiesMonth = function() {
    var c, _i, _len, _results;
    _results = [];
    for (_i = 0, _len = cities.length; _i < _len; _i++) {
      c = cities[_i];
      c.removeFromMap(map);
      c.addToMap(month, map);
      _results.push($('#month').text(MONTHNAMES[month]));
    }
    return _results;
  };

  $('#prev_btn').click(function() {
    month -= 1;
    if (month < 0) {
      month += 12;
    }
    return updateCitiesMonth();
  });

  $('#next_btn').click(function() {
    month += 1;
    if (month > 11) {
      month -= 12;
    }
    return updateCitiesMonth();
  });

  rgb2hex = function(red, green, blue) {
    var rgb;
    rgb = blue | (green << 8) | (red << 16);
    return '#' + (0x1000000 + rgb).toString(16).slice(1);
  };

  gradient = function(rgb_min, rgb_max, min, max, val) {
    var delta, i, rgb;
    if (val <= min) {
      return rgb_min;
    } else if (val >= max) {
      return rgb_max;
    }
    delta = (function() {
      var _i, _len, _ref, _results;
      _ref = [0, 1, 2];
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        i = _ref[_i];
        _results.push(rgb_max[i] - rgb_min[i]);
      }
      return _results;
    })();
    rgb = (function() {
      var _i, _len, _ref, _results;
      _ref = [0, 1, 2];
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        i = _ref[_i];
        _results.push(rgb_min[i] + delta[i] * (val - min) / (max - min));
      }
      return _results;
    })();
    return rgb;
  };

  temperatureToHtml = function(value) {
    var rgb, rgb_txt;
    if (value === null) {
      return "";
    }
    if (value > 10) {
      rgb = gradient(MIN_RED, MAX_RED, 10, 40, value);
    } else {
      rgb = gradient(MAX_BLUE, MIN_BLUE, -15, 10, value);
    }
    rgb_txt = BLACK;
    return "<div class=\"temperature\" style=\"            background-color: " + (rgb2hex.apply(null, rgb)) + ";            color: " + (rgb2hex.apply(null, rgb_txt)) + "            \">" + value + "Â°C</div>";
  };

  precipitationToHtml = function(value) {
    var rgb, rgb_txt;
    if (value === null) {
      return "";
    }
    rgb = gradient(MIN_GREEN, MAX_GREEN, 0, 250, value);
    rgb_txt = BLACK;
    return "<div class=\"temperature\" style=\"            background-color: " + (rgb2hex.apply(null, rgb)) + ";            color: " + (rgb2hex.apply(null, rgb_txt)) + "            \">" + value + "mm</div>";
  };

  City = (function() {

    function City(name, coords, meteo) {
      this.name = name;
      this.coords = coords;
      this.meteo = meteo;
    }

    City.prototype.getData = function(code, month) {
      if (!(code in this.meteo)) {
        return null;
      }
      return this.meteo[code][month];
    };

    City.prototype.addToMap = function(month, map) {
      var high, html, icon, prec;
      high = this.getData('avgHigh', month);
      prec = this.getData('precipitation', month);
      if (prec === null) {
        prec = this.getData('rain', month);
      }
      html = "" + (temperatureToHtml(high));
      html += "" + (precipitationToHtml(prec));
      icon = L.divIcon({
        className: 'citydata',
        html: html,
        iconSize: null
      });
      this.marker = L.marker(this.coords, {
        title: this.name,
        icon: icon
      });
      return this.marker.addTo(map);
    };

    City.prototype.removeFromMap = function(map) {
      return map.removeLayer(this.marker);
    };

    return City;

  })();

  cities = [];

  loadCities = function(data) {
    var city, coords, infos, monthly_stats, name, _results;
    while (cities.length > 0) {
      city = cities.pop();
      city.removeFromMap(map);
    }
    _results = [];
    for (name in data) {
      infos = data[name];
      coords = [infos.lat, infos.long];
      monthly_stats = infos.month_stats;
      city = new City(name, coords, monthly_stats);
      cities.push(city);
      _results.push(city.addToMap(month, map));
    }
    return _results;
  };

  refreshCities = function(e) {
    var bounds, coords;
    bounds = map.getBounds();
    coords = {
      n: bounds.getNorth(),
      s: bounds.getSouth(),
      e: bounds.getEast(),
      w: bounds.getWest()
    };
    return $.get('data', coords, loadCities, 'json');
  };

  map.on('moveend', refreshCities);

  refreshCities({});

}).call(this);
